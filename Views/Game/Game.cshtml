@model Minesweeper.Models.StartGameModel

@{
	int rows = Model.BoardSize;
	int cols = Model.BoardSize;
}

<div id="gameModal">
    <div class="modal-content">
        <h2>Game Over!</h2>
        <p id="gamePoints"></p>
        <button class="btn btn-primary" onclick="restartGame()">Play Again?</button>
        <button class="btn btn-secondary" onclick="startGame()">Adjust Difficulty</button>
        <button class="btn btn-warning" onclick="viewBoard()">View Board</button>
    </div>
</div>

<div class="game-container">
	<div class="board" style="grid-template-columns: repeat(@cols, 30px);">
		@for (int i = 0; i < rows; i++)
		{
			@for (int j = 0; j < cols; j++)
			{
				<button class="cell" data-row="@i" data-col="@j" onclick="revealCell(@i, @j)"></button>
			}
		}
	</div>
</div>

<script>
    let initialBoard;

	function revealCell(row, col) {
		fetch(`/Game/RevealCell?row=${row}&col=${col}`, {
			method: 'POST'
		})
			.then(response => response.json())
			.then(data => {
                console.log(data);
				if (data.gameState === "lost" ) {
                    updateBoard(initialBoard, "lost");
                    document.getElementById("gameModal").classList.add("active");
                    document.querySelector(".modal-content p").innerText = `You lost with ${data.points} points!`;
                } else if (data.gameState === "won") {
                    updateBoard(initialBoard, "won");
                    document.getElementById("gameModal").classList.add("active");
                    document.querySelector(".modal-content h2").innerText = "You Win!";
                    document.querySelector(".modal-content p").innerText = `You won with ${data.points} points!`;
                } else {
                    updateBoard(data.cells, data.gameState);
                }

                if (!initialBoard) {
                    initialBoard = data.cells;
                }
			})
			.catch(error => console.error('Error:', error));
	}
    
    function updateBoard(cells, game) {
        cells.forEach(cell => {
            let cellElement = document.querySelector(`[data-row='${cell.row}'][data-col='${cell.col}']`);
            if (cell.isFlagged) {
                cellElement.style.backgroundImage = "url('/assets/flag.png')";
            } else if (cell.isMine && game != "continue") {
                cellElement.style.backgroundImage = "url('/assets/mine.png')";
            } else if (cell.adjacentMines > 0 && cell.isRevealed || (game != "continue" && cell.adjacentMines > 0)) {
                cellElement.style.backgroundImage = `url('/assets/Num ${cell.adjacentMines}.png')`;
                cellElement.disabled = true;
            } else if (cell.isRevealed || game != "continue") {
                cellElement.style.backgroundImage = "url('/assets/tile revealed.png')";
                cellElement.disabled = true;
            } else {
                cellElement.style.backgroundImage = "url('/assets/tile.png')";
            }

            if (game != "continue") {
                cellElement.disabled = true;
            }
        });
    }

    function restartGame() {
        window.location.reload();
    }

    function viewBoard() {
        document.getElementById("gameModal").classList.remove("active");
    }

    function startGame() {
        window.location.href = "/Game";
    }
</script>

<style>
	.game-container {
		text-align: center;
		margin-top: 20px;
	}

	.board {
		display: grid;
		justify-content: center;
	}

	.cell {
		width: 30px;
		height: 30px;
		border: 1px solid black;
		background-color: lightgray;
		font-size: 18px;
		background-image: url('/assets/tile.png');
		background-size: cover;
	}

    .cell:disabled {
        cursor: not-allowed;
    }

    .cell:hover:not([disabled]) {
        background-image: url('/assets/tile hover.png') !important;
    }

    #gameModal {
        opacity: 0;
        pointer-events: none;
        z-index: -1;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.3);
        transition-duration: 0.5s;
    }

    body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.65);
        z-index: -1;
        opacity: 0;
        transition-duration: 0.5s;
        backdrop-filter: blur(5px);
    }

    body:has(#gameModal.active)::before {
        opacity: 1;
        z-index: 4;
    }

    #gameModal.active {
        opacity: 1;
        pointer-events: all;
        z-index: 5;
    }

    .modal-content {
        padding: 20px 50px;
    }

    .modal-content button {
        margin: 10px 0;
        padding: 10px 15px;
        font-size: 16px;
        cursor: pointer;
        width: 100%;
    }

</style>
