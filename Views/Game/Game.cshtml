@model Minesweeper.Models.StartGameModel

@{
    int rows = Model.BoardSize;
    int cols = Model.BoardSize;
    string cellSize = 100 / cols + "%";
}
<link rel="stylesheet" href="/css/game.css" asp-append-version="true"/>

<div id="gameModal">
    <div class="modal-content">
        <h2>Game Over!</h2>
        <p id="gamePoints"></p>
        <button class="btn btn-primary" onclick="restartGame()">Play Again?</button>
        <button class="btn btn-secondary" onclick="startGame()">Adjust Difficulty</button>
        <button class="btn btn-warning" onclick="viewBoard()">View Board</button>
    </div>
</div>

<div class="game-container h-100">
    <aside class="sidebar p-4">
        <p class="tag">
            <img src="/Assets/Images/Game/score4.png"/>
            <span id="score">0</span>
        </p>
        <p class="tag">
            <img src="/Assets/Images/Game/info4.png"/>
            <span id="timer">00:00:00</span>
        </p>
        <div id="rewardMenu" class="pt-4 text-start text-white">
        </div>
    </aside>
    <div class="board" style="grid-template-columns: repeat(@cols, @cellSize);">
        @for (int i = 0; i < rows; i++)
        {
            @for (int j = 0; j < cols; j++)
            {
                <button class="cell" data-row="@i" data-col="@j" data-flagged="false"></button>
            }
        }
    </div>
    <aside class="sidebar p-4">
    </aside>
</div>
<script>
    document.querySelectorAll('.cell').forEach(btn => {
        btn.addEventListener('click', function(e) {
            e.preventDefault();
            const row = this.getAttribute('data-row');
            const col = this.getAttribute('data-col');
            revealCell(row, col);
        });

        btn.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            if (btn.disabled) {
                return;
            }
            const row = this.getAttribute('data-row');
            const col = this.getAttribute('data-col');
            rightClick(e, row, col);
            let dataFlagged = btn.getAttribute('data-flagged') === 'true';
            btn.setAttribute('data-flagged', !dataFlagged ? 'true' : 'false');
       });
    });
    
	function revealCell(row, col) {
		fetch(`/Game/RevealCell?row=${row}&col=${col}`, {
			method: 'POST'
		})
			.then(response => response.json())
			.then(data => {
			    if (data.invalid) {
			        return;
			    }
			    
			    if (data.rewards) {
                    updateBoard(data.cells, data.gameState);
                    
                    let rewardMenu = document.getElementById("rewardMenu");
                    rewardMenu.innerHTML = 'Use a reward:';
                    data.rewards.forEach(reward => {
                        rewardMenu.innerHTML += `
                            <button class="tag btn-img w-100" onclick="useReward('${reward}')">
                                <img src="/Assets/Images/Buttons/BtnYellow.png"/>
                                <span>${reward}</span>
                            </button>
                        `;
                    });
                    return;
			    }
			    
                if (data.gameState === "lost" ) {
                    updateBoard(data.cells, "lost");
                    document.getElementById("gameModal").classList.add("active");
                    document.querySelector(".modal-content p").innerText = `You lost with ${data.points} points!`;
                } else if (data.gameState === "won") {
                    updateBoard(data.cells, "won");
                    document.getElementById("gameModal").classList.add("active");
                    document.querySelector(".modal-content h2").innerText = "You Win!";
                    document.querySelector(".modal-content p").innerText = `You won with ${data.points} points!`;
                } else {
                    updateBoard(data.cells, data.gameState);
                }

			})
			.catch(error => console.error('Error:', error));
	}
	
	function rightClick(e, row, col) {
	    e.preventDefault();
        fetch(`/Game/RightClick/?row=${row}&col=${col}`, {
            method: 'POST'
        })
            .then(response => response.json())
            .then(data => {
                updateBoard(data.cells, data.gameState);
            })
            .catch(error => console.error('Error:', error));      
	}
    
    function updateBoard(cells, game) {
        console.log(cells);
        cells.forEach(cell => {
            let cellElement = document.querySelector(`[data-row='${cell.row}'][data-col='${cell.col}']`);
            if (cell.isFlagged) {
                cellElement.style.backgroundImage = "url('/Assets/Images/Game/flag.png')";
            } else if (cell.isMine && game != "continue") {
                cellElement.style.backgroundImage = "url('/Assets/Images/Game/mine.png')";
            } else if (cell.adjacentMines > 0 && cell.isRevealed || (game != "continue" && cell.adjacentMines > 0)) {
                cellElement.style.backgroundImage = `url('/Assets/Images/Game/Num ${cell.adjacentMines}.png')`;
                cellElement.disabled = true;
            } else if (cell.isRevealed && cell.rewardType != 'None' && cell.rewardUsed === false || (game != "continue" && cell.rewardType != 'None')) {
                cellElement.style.backgroundImage = `url('/Assets/Images/Game/Reward.png')`;
            } else if (cell.isRevealed || game != "continue") {
                cellElement.style.backgroundImage = "url('/Assets/Images/Game/tile revealed.png')";
                cellElement.disabled = true;
            } else {
                cellElement.style.backgroundImage = "url('/Assets/Images/Game/tile.png')";
            }

            if (game != "continue") {
                cellElement.disabled = true;
            }
        });
    }

    function restartGame() {
        window.location.reload();
    }

    function viewBoard() {
        document.getElementById("gameModal").classList.remove("active");
    }

    function startGame() {
        window.location.href = "/Game";
    }

</script>